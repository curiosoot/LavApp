@using Proyecto_LavApp.Models.POCO
@using Proyecto_LavApp.Models
@model Proyecto_LavApp.Models.reserva_servicio
 
@{
    ViewBag.Title = "Crear";
    List<SelectListItem> listusr = (List<SelectListItem>)ViewBag.listausr;
    List<SelectListItem> listveh = (List<SelectListItem>)ViewBag.listavehiculos;


    var persona = new PersonaPOCO();
    var fullName = string.Empty;
    if (Session["Usuario"] != null)
    {
        var usuario = new usuarios();
        usuario = (usuarios)Session["Usuario"];
        using (LavApp_BDEntities contexto = new LavApp_BDEntities())
        {
            persona = contexto.personas.Where(x => x.id_persona == usuario.id_persona)
                .Select(x => new PersonaPOCO {
                    Documento = x.txt_documento,
                    Apellido1 = x.txt_apellido1,
                    Apellido2 = x.txt_apellido2,
                    Nombre = x.txt_nombre }).FirstOrDefault();
        }
        fullName = $"{persona.Nombre} {persona.Apellido1} {persona.Apellido2}";
    }

}

<h2 class="text-center"><i class="fas fa-ticket-alt"></i> Crear Reserva</h2>

@using (Html.BeginForm("Crear", "reserva_servicio_", FormMethod.Post, new { @id = "frmcrearrva", @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-row">
            <div class="col-md-12">
                <h6 class="ml-3">Datos Contacto</h6>
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.txt_nombre, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.txt_nombre, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.txt_nombre, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.cedula, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.cedula, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.cedula, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.txt_email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.txt_email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.txt_email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.telefono, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.telefono, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.telefono, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
              
        <hr />

        <div class="form-row">
            <div class="col-md-12">
                <h6 class="ml-3">Datos Reserva</h6>
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.fecha_servicio, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.fecha_servicio, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.fecha_servicio, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.hora_servicio, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.hora_servicio, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.hora_servicio, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.id_vehiculo, "Vehículo", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.DropDownList("id_vehiculo", listveh, null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.id_vehiculo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.id_usuario_atiende, "Empleado", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.DropDownList("id_usuario_atiende", listusr, null, htmlAttributes: new { @class = "form-control", disabled = "true" })
                    @Html.ValidationMessageFor(model => model.id_usuario_atiende, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div class="form-row">
            <div class="form-group col-md-12">
                @Html.LabelFor(model => model.txt_observacion, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @*@Html.TextAreaFor(model => model.txt_observacion, new { htmlAttributes = new { @class = "form-control", rows = "3" } })*@
                    @Html.TextAreaFor(model => model.txt_observacion, new { @class = "form-control", @rows = 3 })
                    @Html.ValidationMessageFor(model => model.txt_observacion, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-md-12 ml-3">
                <button type="button" class="btn btn-primary" id="addServices">
                    Agregar Servicios
                </button>
            </div>
        </div>

    </div>
}

<script>
    function Agregar() {
        var frmcrearrva = document.getElementById("frmcrearrva");
        frmcrearrva.submit();
    }

    @*function AdicionarSrv() {
        @Html.Partial("../reserva_tipo_serv_/Index")
    }*@

</script>

@section scripts{
    <script>

        $(document).ready(function () {

            $("#cedula").val("@persona.Documento");
            $("#txt_nombre").val("@fullName");

            var dtToday = new Date();

            var month = dtToday.getMonth() + 1;
            var day = dtToday.getDate();
            var year = dtToday.getFullYear();
            if (month < 10)
                month = '0' + month.toString();
            if (day < 10)
                day = '0' + day.toString();

            var maxDate = year + '-' + month + '-' + day;

            $('#fecha_servicio').attr('min', maxDate);

            var hora = $("#hora_servicio");
            var fecha = $("#fecha_servicio");

            hora.change(function () {
                if (fecha.val() != "" && hora.val() !== "") {
                    EjecutarAjax("@Url.Action("ValidarHorarioEmpleado", "reserva_servicio_")", "GET", { fecha: fecha.val(), hora: hora.val() });
                }
            });

            fecha.change(function () {
                if (fecha.val() != "" && hora.val() !== "") {
                    EjecutarAjax("@Url.Action("ValidarHorarioEmpleado", "reserva_servicio_")", "GET", { fecha: fecha.val(), hora: hora.val() });
                }
            });

            function GetRequestVerificationToken() {
                return $("input:hidden[name=\"__RequestVerificationToken\"]").val();
            }

            function EjecutarAjax(url, type, values, funcionSuccess, variable) {

                var types = ["POST", "PUT", "DELETE"];
                var token = GetRequestVerificationToken();

                var sendHeaders = {};
                if (types.indexOf(type) > -1 && token != null && token !== "") {
                    sendHeaders["__RequestVerificationToken"] = token;
                }

                $.ajax({
                    cache: false,
                    url: url,
                    type: type,
                    data: values,
                    headers: sendHeaders,
                    success: function (data) {
                        if (data.error == true) {
                            Swal.fire({
                                icon: 'warning',
                                text: 'No hay empleados disponibles en el horario ingresado',
                            });
                            $("#id_usuario_atiende").empty();
                            $("#id_usuario_atiende").attr("disabled", "true");
                        } else {
                            $("#id_usuario_atiende").removeAttr("disabled");
                            $("#id_usuario_atiende").empty();
                            $.each(data.lisusr_atiende, function (i, item) {
                                $("#id_usuario_atiende").append('<option value="' + item.Value + '">' + item.Text + '</option>');
                            });

                            if (data.empleados_no_disponibles.length > 0) {
                                data.empleados_no_disponibles.forEach(function (item) {
                                    $("#id_usuario_atiende option[value='" + item + "']").remove();
                                });
                            }
                        }
                    },
                    error: function (jqXHR, exception) {
                        var errorAjax = "";
                        if (jqXHR.status === 0) {
                            errorAjax += "No cuenta con conexion a internet, \xF3 su sesion ha caducado.";
                            alert(errorAjax);
                            return;
                        } else if (jqXHR.status === 404) {
                            alert(errorAjax, 404);
                        } else if (jqXHR.status === 500) {
                            alert(errorAjax, 500);
                        } else if (exception === "parsererror") {
                            errorAjax += "Error al convertir el objeto en JSON";
                            alert(errorAjax);
                        } else if (exception === "timeout") {
                            errorAjax += "Tiempo de espera agotado. Por favor comuniquese con el administrador del sistema";
                            alert(errorAjax);
                        } else if (exception === "abort") {
                            errorAjax += "Petición AJAX abortada. Por favor comuniquese con el administrador del sistema";
                            alert(errorAjax);
                        } else {
                            errorAjax += "Error inesperado (" + jqXHR.responseText + "). Por favor comuniquese con el administrador del sistema";
                            alert(errorAjax);
                        }
                    },
                    complete: function (data) {

                    }

                });
            }

            $("#addServices").click(function () {
                Swal.fire({
                    title: '¿Desea crear el registro?',
                    showCancelButton: true,
                    confirmButtonText: `Aceptar`,
                    denyButtonText: `Cancelar`,
                }).then((result) => {
                    if (result.isConfirmed) {
                        Agregar();
                    } else if (result.isDenied) {
                    }
                });
            });
        });



    </script>
}