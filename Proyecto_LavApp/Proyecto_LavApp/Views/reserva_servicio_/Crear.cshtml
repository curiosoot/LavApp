@model Proyecto_LavApp.Models.reserva_servicio

@{
    ViewBag.Title = "Crear";
    List<SelectListItem> listusr = (List<SelectListItem>)ViewBag.listausr;
    List<SelectListItem> listveh = (List<SelectListItem>)ViewBag.listavehiculos;
}

<h2 class="text-center"><i class="fas fa-ticket-alt"></i> Crear Reserva</h2>

@using (Html.BeginForm("Crear", "reserva_servicio_", FormMethod.Post, new { @id = "frmcrearrva", @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-row">
            <div class="col-md-12">
                <h6 class="ml-3">Datos Contacto</h6>
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.txt_nombre, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.txt_nombre, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.txt_nombre, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.cedula, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.cedula, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.cedula, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.txt_email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.txt_email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.txt_email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.telefono, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.telefono, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.telefono, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.id_vehiculo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.id_vehiculo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.id_vehiculo, "", new { @class = "text-danger" })
                </div>
            </div>*@
        <hr />

        <div class="form-row">
            <div class="col-md-12">
                <h6 class="ml-3">Datos Reserva</h6>
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.fecha_servicio, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.fecha_servicio, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.fecha_servicio, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.hora_servicio, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.hora_servicio, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.hora_servicio, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.id_vehiculo, "Vehículo", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.DropDownList("id_vehiculo", listveh, null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.id_vehiculo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.id_usuario_atiende, "Empleado", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.DropDownList("id_usuario_atiende", listusr, null, htmlAttributes: new { @class = "form-control", disabled="true" })
                    @Html.ValidationMessageFor(model => model.usuarios.nom_asoc, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div class="form-row">
            <div class="form-group col-md-12">
                @Html.LabelFor(model => model.txt_observacion, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @*@Html.TextAreaFor(model => model.txt_observacion, new { htmlAttributes = new { @class = "form-control", rows = "3" } })*@
                    @Html.TextAreaFor(model => model.txt_observacion, new { @class = "form-control", @rows = 3 })
                    @Html.ValidationMessageFor(model => model.txt_observacion, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-md-12 ml-3">
                <button type="button" class="btn btn-primary" id="addServices">
                    Agregar Servicios
                </button>
            </div>
        </div>

        <!--<br />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">-->
        <!-- Button trigger modal -->
        <!--<button type="button" class="btn btn-primary" data-toggle="modal" onclick="AdicionarSrv()">
                Agregar Servicio
                </button>
                Html.Partial("../reserva_tipo_serv_/Index")
            </div>
        </div>
        <br/>-->

        <!--<div class="form-group">
            <div class="col-md-offset-2 col-md-10">-->
                <!--<input type="submit" value="Create" class="btn btn-default" />-->
                <!-- Button trigger modal -->
                <!--<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
                    Agregar Servicios
                </button>-->

                <!-- Modal -->
                <!--<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">¿Desea crear el registro?</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div style="padding:1em">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                                <button type="button" onclick="Agregar()" class="btn btn-primary">Aceptar</button>
                            </div>
                        </div>
                    </div>
                </div>-->
                <!-- Close Button trigger modal -->

            <!--</div>
        </div>-->
    </div>
}

<script>
    function Agregar() {
        var frmcrearrva = document.getElementById("frmcrearrva");
        frmcrearrva.submit();
    }

    @*function AdicionarSrv() {
        @Html.Partial("../reserva_tipo_serv_/Index")
    }*@

</script>

@section scripts{
    <script>
        var hora = $("#hora_servicio");
        var fecha = $("#fecha_servicio");
        var id_employee = $("#id_usuario_atiende");

        hora.focusout(function () {
            if (fecha.val() != "" && hora.val() !== "") {
                console.log(fecha.val(), hora.val());
                EjecutarAjax("@Url.Action("ValidarHorarioEmpleado", "reserva_servicio_")", "GET", { fecha: fecha.val(), hora: hora.val() });
            }
        });

        fecha.focusout(function () {
            if (fecha.val() != "" && hora.val() !== "") {
                console.log(fecha.val(), hora.val());
                EjecutarAjax("@Url.Action("ValidarHorarioEmpleado", "reserva_servicio_")", "GET", { fecha: fecha.val(), hora: hora.val() });
            }
        });

        function GetRequestVerificationToken() {
            return $("input:hidden[name=\"__RequestVerificationToken\"]").val();
        }

        function EjecutarAjax(url, type, values, funcionSuccess, variable) {

            var types = ["POST", "PUT", "DELETE"];
            var token = GetRequestVerificationToken();

            var sendHeaders = {};
            if (types.indexOf(type) > -1 && token != null && token !== "") {
                sendHeaders["__RequestVerificationToken"] = token;
            }

            $.ajax({
                cache: false,
                url: url,
                type: type,
                data: values,
                headers: sendHeaders,
                success: function (data) {
                    if (data.error == true) {
                        Swal.fire({
                            icon: 'warning',
                            text: 'No hay empleados disponibles en el horario ingresado',
                        });
                    } else {
                        $("#id_usuario_atiende").removeAttr("disabled");
                        if (data.empleados_no_disponibles.length > 0) {
                            data.empleados_no_disponibles.forEach(function (item) {
                                $("#id_usuario_atiende option[value='" + item + "']").remove();
                            });
                        }
                    }
                },
                error: function (jqXHR, exception) {
                    var errorAjax = "";
                    if (jqXHR.status === 0) {
                        errorAjax += "No cuenta con conexion a internet, \xF3 su sesion ha caducado.";
                        alert(errorAjax);
                        return;
                    } else if (jqXHR.status === 404) {
                        alert(errorAjax, 404);
                    } else if (jqXHR.status === 500) {
                        alert(errorAjax, 500);
                    } else if (exception === "parsererror") {
                        errorAjax += "Error al convertir el objeto en JSON";
                        alert(errorAjax);
                    } else if (exception === "timeout") {
                        errorAjax += "Tiempo de espera agotado. Por favor comuniquese con el administrador del sistema";
                        alert(errorAjax);
                    } else if (exception === "abort") {
                        errorAjax += "Petición AJAX abortada. Por favor comuniquese con el administrador del sistema";
                        alert(errorAjax);
                    } else {
                        errorAjax += "Error inesperado (" + jqXHR.responseText + "). Por favor comuniquese con el administrador del sistema";
                        alert(errorAjax);
                    }
                },
                complete: function (data) {

                }

            });
        }

        $("#addServices").click(function () {
            Swal.fire({
                title: '¿Desea crear el registro?',
                showCancelButton: true,
                confirmButtonText: `Aceptar`,
                denyButtonText: `Cancelar`,
            }).then((result) => {
                if (result.isConfirmed) {
                    // Swal.fire('Saved!', '', 'success')
                    Agregar();
                } else if (result.isDenied) {
                    // Swal.fire('Changes are not saved', '', 'info')
                }
            });
        });

    </script>
    }